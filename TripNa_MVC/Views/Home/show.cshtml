@{
    ViewData["Title"] = "Show";
    Layout = null;
}

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- 字體相關 -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+TC&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <title>@ViewData["Title"]</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden; /* 隱藏滾動條 */
            height: 100vh;
            font-family: "Noto Serif TC", serif;
        }

        .btn {
            position: relative;
            color: white;
            font-size: 1rem;
            text-transform: uppercase;
            font-weight: bold;
            text-align: center;
            text-decoration: none;
            transition: all 0.2s ease;
            padding: 
            20px;
            display: inline-flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

            .btn:before {
                content: "";
                position: absolute;
          
                left: 0;
                display: block;
                border-radius: 28px;
                background: rgba(255, 171, 157, 0.5);
                width: 56px;
                height: 56px;
                transition: all 0.3s ease;
            }

            .btn span {
                position: relative;
                z-index: 1;
            }

            .btn svg {
                position: relative;
                top: 0;
                margin-left: 10px;
                fill: none;
                stroke-linecap: round;
                stroke-linejoin: round;
                stroke: white;
                stroke-width: 2;
                transform: translateX(-5px);
                transition: all 0.3s ease;
            }

            .btn:hover:before {
                width: 100%;
                background: #FFAB9D;
            }

            .btn:hover svg {
                transform: translateX(0);
            }

            .btn:hover,
            .btn:focus {
                color: whitesmoke;
            }

            .btn:active {
                color:floralwhite;
                transform: scale(0.96);
            }

        .container {
            display: flex;
            height: 100vh;
            width: 100%;
            transition: transform 1s ease-out;
            z-index: 0;
        }

        .section {
            flex: 0 0 100vw;
            height: 100vh;
            position: relative;
            background-size: cover;
            background-position: center center;
            background-repeat: no-repeat;
            opacity: 0;
            transition: opacity 1.5s ease-out;
        }

        .text {
            position: absolute;
            top: 30%;
            left: 10px;
            transform: translate(-50%, -50%);
            font-size: 50px;
            max-width: 20%;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 10px;
            opacity: 0;
            transition: opacity 1s ease-out, transform 2s ease-out;
            line-height: 1.5;
            transform: translateX(-100%);
        }

        .additional-text {
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translate(-50%, -50%);
            font-size: 20px;
            max-width: 30%;
            color: white;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 10px;
            opacity: 0;
            transition: opacity 1s ease-out, transform 2s ease-out;
            transform: translateX(100%);
            
        }

        .video-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1;
        }

        .scroll-indicator {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 80%;
            height: 10px;
            background-color: rgba(255, 255, 255, 0.3);
            border-radius: 5px;
            overflow: hidden;
            z-index: 10;
        }

        .scroll-bar {
            height: 100%;
            width: 0;
            background-color: rgba(255, 255, 255, 0.8);
            transition: width 0.5s ease-out;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="section" style="opacity: 1;">
            <video class="video-background" autoplay muted loop>
                <source src="@Url.Content("/_img/show/首頁.mp4")" type="video/mp4">
            </video>
            <div class="text">
                台灣．生態之旅
                <br />
                Taiwan
                <br />
                <p style="font-size:18px">台灣的山岳景觀壯麗雄偉，中央山脈縱貫南北，提供了無數的登山步道和壯觀的景色。阿里山的雲海和日出是遊客必訪的勝地，玉山則是東北亞最高峰，吸引著無數登山愛好者。此外，太魯閣國家公園以其壯麗的峽谷景觀和大理石峽谷聞名，成為台灣的自然奇觀之一。</p>
            </div>
            <div class="additional-text" style="text-align: center;">
                <div style="position: relative; display: inline-block;">
                    <img src="@Url.Content("/_img/show/mouse.png")" alt="Alternate Text" style="width:50px;height:50px; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); margin-top: 30px;" />
                    <span style="display: block;">滾動滑鼠滾輪</span>
                </div>
            </div>


            
        </div>

        <div class="section">
            <video class="video-background" autoplay muted loop>
                <source src="@Url.Content("/_img/show/海.mp4")" type="video/mp4">
            </video>
            <div class="text">
                海．景
                <br />
                ocean view
                <br />
                <p style="font-size:18px">台灣四面環海，擁有多樣的海洋景觀。東海岸的太平洋浪濤洶湧，適合衝浪和潛水。不論是都市還是鄉村，當地居民都樂於分享他們的文化和故事。</p>
            </div>

        </div>
        <div class="section" style="background-image: url('@Url.Content("/_img/show/人.jpg")');">
            <div class="text">
                人‧情‧味
                <br />
                Human touch
                <br />
                <p style="font-size:18px">台灣的人情味充滿了生動的熱情和真誠。無論是在繁華的市場還是寧靜的街巷，你都能感受到滿滿的溫暖和友善。攤販熱情地推薦拿手的小吃，捷運上陌生人自動讓座，這些細微舉動彰顯了台灣人的待人誠懇態度。社區裡的鄰里彼此關心、無私幫助，更是這份人情味最生動的寫照。</p>
            </div>
        </div>
        <div class="section" style="background-image: url('@Url.Content("/_img/show/文化.jpg")');">
            <div class="text">
                文．化
                <br/>  
                Culture
                <br/>
                <p style="font-size:18px">台灣文化彷彿一幅色彩繽紛的畫卷，融合了中華傳統、原住民風情及現代活力。香氣四溢的小吃街、熱鬧的廟會、悠揚的庙会、還有多樣化的藝術表演，無不展現出台灣深厚的宗教信仰和民俗風情。從壯麗的山脈到湛藍的海洋，台灣的自然美景更是讓人心馳神往。這些元素共同編織成了現代台灣獨特而多元的文化繪卷。</p>
            </div>
        </div>
        <div class="section" style="background-image: url('@Url.Content("/_img/show/首頁.jpg")');">
            <div class="text">趣哪TripNa
                <br />
                Human touch
                <br />
                <p style="font-size:18px">「趣哪 TripNa」的初衷是希望解決規劃旅遊時常常碰到的問題，像是規劃行程的煩惱、交通不便以及資訊不足等等。本網站提供客製化旅行行程並且媒合導遊的全方位旅遊平台。</p>
            </div>
            
            <div class="additional-text" style="text-align: center;">
                <div style="position: relative; display: inline-block;">
                    <a class="btn" asp-controller="Home" asp-action="Index">
                        <span>前往首頁</span>
                        <svg width="13px" height="10px" viewBox="0 0 13 10">
                            <path d="M1,5 L11,5"></path>
                            <polyline points="8 1 12 5 8 9"></polyline>
                        </svg>
                    </a>
                </div>
            </div>


        </div>
    </div>
    <div class="scroll-indicator">
        <div class="scroll-bar"></div>
    </div>

    <script>
        // 等到DOM內容加載完畢後執行
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.querySelector('.container'); // 取得容器元素
            const sections = document.querySelectorAll('.section'); // 取得所有的section元素
            const scrollBar = document.querySelector('.scroll-bar'); // 取得滾動條元素
            let count = 0; // 初始化計數器，用於追踪當前section
            const sectionWidth = window.innerWidth; // 獲取窗口的寬度，作為每個section的寬度

            // 初始化第一個section的顯示
            sections[0].style.opacity = 1;
            const firstText = sections[0].querySelector('.text');
            firstText.style.opacity = 1;
            firstText.style.transform = 'translateX(0)';
            const firstAdditionalText = sections[0].querySelector('.additional-text');
            if (firstAdditionalText) {
                firstAdditionalText.style.opacity = 1;
                firstAdditionalText.style.transform = 'translateX(0)';
            }

            // 定義滾動動畫
            function animateScroll(delta) {
                // 根據滾動方向更新計數器
                if (delta > 0) {
                    count = Math.min(count + 1, sections.length - 1); // 向右滾動
                } else {
                    count = Math.max(count - 1, 0); // 向左滾動
                }

                const move = -count * sectionWidth; // 計算位移距離
                container.style.transform = `translateX(${move}px)`; // 更新容器的位移
                updateScrollBar(); // 更新滾動條

                // 設置當前section的透明度為1
                sections[count].style.opacity = 1;

                // 延遲500ms後顯示文字內容
                setTimeout(() => {
                    const text = sections[count].querySelector('.text');
                    text.style.opacity = 1;
                    text.style.transform = 'translateX(0)';

                    const additionalText = sections[count].querySelector('.additional-text');
                    if (additionalText) {
                        additionalText.style.opacity = 1;
                        additionalText.style.transform = 'translateX(0)';
                    }
                }, 500);
            }

            // 處理滑鼠滾輪事件
            function handleMouseWheel(event) {
                event.preventDefault(); // 阻止預設的滾動行為

                let delta = event.deltaY || event.detail || -event.wheelDelta; // 獲取滾動距離
                const scrollThreshold = 100; // 定義滾動閾值

                // 根據滾動距離更新計數器
                if (delta > scrollThreshold) {
                    count = Math.min(count + 1, sections.length - 1); // 向右滾動
                } else if (delta < -scrollThreshold) {
                    count = Math.max(count - 1, 0); // 向左滾動
                }

                const move = -count * sectionWidth; // 計算位移距離
                container.style.transform = `translateX(${move}px)`; // 更新容器的位移
                updateScrollBar(); // 更新滾動條

                // 重置所有section的狀態
                sections.forEach((section, index) => {
                    section.style.opacity = index === count ? 1 : 0; // 只有當前section設置為透明
                    const text = section.querySelector('.text');
                    text.style.opacity = 0;
                    text.style.transform = 'translateX(-100%)';

                    const additionalText = section.querySelector('.additional-text');
                    if (additionalText) {
                        additionalText.style.opacity = 0;
                        additionalText.style.transform = 'translateX(100%)';
                    }
                });

                // 延遲500ms後顯示當前section的文字內容
                setTimeout(() => {
                    const text = sections[count].querySelector('.text');
                    text.style.opacity = 1;
                    text.style.transform = 'translateX(0)';

                    const additionalText = sections[count].querySelector('.additional-text');
                    if (additionalText) {
                        additionalText.style.opacity = 1;
                        additionalText.style.transform = 'translateX(0)';
                    }
                }, 500);
            }

            // 更新滾動條的長度
            function updateScrollBar() {
                const scrollPercentage = (count / (sections.length - 1)) * 100; // 計算滾動百分比
                scrollBar.style.width = `${scrollPercentage}%`; // 設置滾動條的寬度
            }

            // 監聽滑鼠滾輪事件
            if ("onmousewheel" in window) {
                window.onmousewheel = handleMouseWheel; // 用於大多數瀏覽器
            } else {
                window.addEventListener("mousewheel", handleMouseWheel, false); // 用於WebKit內核的瀏覽器
                window.addEventListener("DOMMouseScroll", handleMouseWheel, false); // 用於Firefox瀏覽器
            }
        });
    </script>

</body>
</html>
